<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="559"><g><title>[[heap]] (8 samples, 1.43%)</title><rect x="0.0000%" y="469" width="1.4311%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2500%" y="479.50"></text></g><g><title>std::sys::unix::memchr::memchr (8 samples, 1.43%)</title><rect x="0.0000%" y="453" width="1.4311%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8"/><text x="0.2500%" y="463.50"></text></g><g><title>[[stack]] (5 samples, 0.89%)</title><rect x="1.4311%" y="469" width="0.8945%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="5"/><text x="1.6811%" y="479.50"></text></g><g><title>std::sys::unix::memchr::memchr (5 samples, 0.89%)</title><rect x="1.4311%" y="453" width="0.8945%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="5"/><text x="1.6811%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="453" width="0.1789%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="1"/><text x="2.7545%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="437" width="0.1789%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="1"/><text x="2.7545%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="421" width="0.1789%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="1"/><text x="2.7545%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="405" width="0.1789%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="1"/><text x="2.7545%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="389" width="0.1789%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1"/><text x="2.7545%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="373" width="0.1789%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="1"/><text x="2.7545%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="357" width="0.1789%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="1"/><text x="2.7545%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="341" width="0.1789%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="1"/><text x="2.7545%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="325" width="0.1789%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="1"/><text x="2.7545%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="309" width="0.1789%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="1"/><text x="2.7545%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="293" width="0.1789%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="2.7545%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="277" width="0.1789%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="1"/><text x="2.7545%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="261" width="0.1789%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="1"/><text x="2.7545%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="245" width="0.1789%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="1"/><text x="2.7545%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="229" width="0.1789%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="1"/><text x="2.7545%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="2.5045%" y="213" width="0.1789%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="1"/><text x="2.7545%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.89%)</title><rect x="2.6834%" y="389" width="0.8945%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="5"/><text x="2.9334%" y="399.50"></text></g><g><title>one_billion_row_challenge::main (11 samples, 1.97%)</title><rect x="2.6834%" y="453" width="1.9678%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="11"/><text x="2.9334%" y="463.50">o..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (11 samples, 1.97%)</title><rect x="2.6834%" y="437" width="1.9678%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="11"/><text x="2.9334%" y="447.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (11 samples, 1.97%)</title><rect x="2.6834%" y="421" width="1.9678%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="11"/><text x="2.9334%" y="431.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (11 samples, 1.97%)</title><rect x="2.6834%" y="405" width="1.9678%" height="15" fill="rgb(241,131,45)" fg:x="15" fg:w="11"/><text x="2.9334%" y="415.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6 samples, 1.07%)</title><rect x="3.5778%" y="389" width="1.0733%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="6"/><text x="3.8278%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 1.07%)</title><rect x="3.5778%" y="373" width="1.0733%" height="15" fill="rgb(225,111,53)" fg:x="20" fg:w="6"/><text x="3.8278%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 1.07%)</title><rect x="3.5778%" y="357" width="1.0733%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="6"/><text x="3.8278%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6 samples, 1.07%)</title><rect x="3.5778%" y="341" width="1.0733%" height="15" fill="rgb(214,148,48)" fg:x="20" fg:w="6"/><text x="3.8278%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (6 samples, 1.07%)</title><rect x="3.5778%" y="325" width="1.0733%" height="15" fill="rgb(232,36,49)" fg:x="20" fg:w="6"/><text x="3.8278%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 1.07%)</title><rect x="3.5778%" y="309" width="1.0733%" height="15" fill="rgb(209,103,24)" fg:x="20" fg:w="6"/><text x="3.8278%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 1.07%)</title><rect x="3.5778%" y="293" width="1.0733%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="6"/><text x="3.8278%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 1.07%)</title><rect x="3.5778%" y="277" width="1.0733%" height="15" fill="rgb(213,181,19)" fg:x="20" fg:w="6"/><text x="3.8278%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 1.07%)</title><rect x="3.5778%" y="261" width="1.0733%" height="15" fill="rgb(254,191,54)" fg:x="20" fg:w="6"/><text x="3.8278%" y="271.50"></text></g><g><title>[unknown] (24 samples, 4.29%)</title><rect x="2.3256%" y="469" width="4.2934%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="24"/><text x="2.5756%" y="479.50">[unkn..</text></g><g><title>std::io::read_until (11 samples, 1.97%)</title><rect x="4.6512%" y="453" width="1.9678%" height="15" fill="rgb(233,36,39)" fg:x="26" fg:w="11"/><text x="4.9012%" y="463.50">s..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.18%)</title><rect x="8.9445%" y="325" width="0.1789%" height="15" fill="rgb(226,3,54)" fg:x="50" fg:w="1"/><text x="9.1945%" y="335.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="325" width="1.0733%" height="15" fill="rgb(245,192,40)" fg:x="51" fg:w="6"/><text x="9.3734%" y="335.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="309" width="1.0733%" height="15" fill="rgb(238,167,29)" fg:x="51" fg:w="6"/><text x="9.3734%" y="319.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="293" width="1.0733%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="6"/><text x="9.3734%" y="303.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="277" width="1.0733%" height="15" fill="rgb(231,60,39)" fg:x="51" fg:w="6"/><text x="9.3734%" y="287.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="261" width="1.0733%" height="15" fill="rgb(208,69,12)" fg:x="51" fg:w="6"/><text x="9.3734%" y="271.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="245" width="1.0733%" height="15" fill="rgb(235,93,37)" fg:x="51" fg:w="6"/><text x="9.3734%" y="255.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="229" width="1.0733%" height="15" fill="rgb(213,116,39)" fg:x="51" fg:w="6"/><text x="9.3734%" y="239.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="213" width="1.0733%" height="15" fill="rgb(222,207,29)" fg:x="51" fg:w="6"/><text x="9.3734%" y="223.50"></text></g><g><title>[unknown] (6 samples, 1.07%)</title><rect x="9.1234%" y="197" width="1.0733%" height="15" fill="rgb(206,96,30)" fg:x="51" fg:w="6"/><text x="9.3734%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="9.3023%" y="181" width="0.8945%" height="15" fill="rgb(218,138,4)" fg:x="52" fg:w="5"/><text x="9.5523%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="9.3023%" y="165" width="0.8945%" height="15" fill="rgb(250,191,14)" fg:x="52" fg:w="5"/><text x="9.5523%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="9.3023%" y="149" width="0.8945%" height="15" fill="rgb(239,60,40)" fg:x="52" fg:w="5"/><text x="9.5523%" y="159.50"></text></g><g><title>one_billion_row_challenge::Stats::update (64 samples, 11.45%)</title><rect x="10.1968%" y="325" width="11.4490%" height="15" fill="rgb(206,27,48)" fg:x="57" fg:w="64"/><text x="10.4468%" y="335.50">one_billion_row_c..</text></g><g><title>core::cmp::Ord::max (1 samples, 0.18%)</title><rect x="21.4669%" y="309" width="0.1789%" height="15" fill="rgb(225,35,8)" fg:x="120" fg:w="1"/><text x="21.7169%" y="319.50"></text></g><g><title>one_billion_row_challenge::main (1 samples, 0.18%)</title><rect x="21.4669%" y="293" width="0.1789%" height="15" fill="rgb(250,213,24)" fg:x="120" fg:w="1"/><text x="21.7169%" y="303.50"></text></g><g><title>one_billion_row_challenge::main (16 samples, 2.86%)</title><rect x="21.6458%" y="325" width="2.8623%" height="15" fill="rgb(247,123,22)" fg:x="121" fg:w="16"/><text x="21.8958%" y="335.50">on..</text></g><g><title>one_billion_row_challenge::parse_i32 (37 samples, 6.62%)</title><rect x="24.5081%" y="325" width="6.6190%" height="15" fill="rgb(231,138,38)" fg:x="137" fg:w="37"/><text x="24.7581%" y="335.50">one_billi..</text></g><g><title>one_billion_row_challenge::to_digit (8 samples, 1.43%)</title><rect x="29.6959%" y="309" width="1.4311%" height="15" fill="rgb(231,145,46)" fg:x="166" fg:w="8"/><text x="29.9459%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (8 samples, 1.43%)</title><rect x="29.6959%" y="293" width="1.4311%" height="15" fill="rgb(251,118,11)" fg:x="166" fg:w="8"/><text x="29.9459%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2 samples, 0.36%)</title><rect x="30.7692%" y="277" width="0.3578%" height="15" fill="rgb(217,147,25)" fg:x="172" fg:w="2"/><text x="31.0192%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 2.68%)</title><rect x="33.9893%" y="293" width="2.6834%" height="15" fill="rgb(247,81,37)" fg:x="190" fg:w="15"/><text x="34.2393%" y="303.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (48 samples, 8.59%)</title><rect x="31.1270%" y="309" width="8.5868%" height="15" fill="rgb(209,12,38)" fg:x="174" fg:w="48"/><text x="31.3770%" y="319.50">&lt;core::slice..</text></g><g><title>one_billion_row_challenge::split_once::_{{closure}} (17 samples, 3.04%)</title><rect x="36.6726%" y="293" width="3.0411%" height="15" fill="rgb(227,1,9)" fg:x="205" fg:w="17"/><text x="36.9226%" y="303.50">one..</text></g><g><title>one_billion_row_challenge::split_once (52 samples, 9.30%)</title><rect x="31.1270%" y="325" width="9.3023%" height="15" fill="rgb(248,47,43)" fg:x="174" fg:w="52"/><text x="31.3770%" y="335.50">one_billion_r..</text></g><g><title>one_billion_row_challenge::main (4 samples, 0.72%)</title><rect x="39.7138%" y="309" width="0.7156%" height="15" fill="rgb(221,10,30)" fg:x="222" fg:w="4"/><text x="39.9638%" y="319.50"></text></g><g><title>ahash::operations::folded_multiply (9 samples, 1.61%)</title><rect x="40.7871%" y="229" width="1.6100%" height="15" fill="rgb(210,229,1)" fg:x="228" fg:w="9"/><text x="41.0371%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (8 samples, 1.43%)</title><rect x="40.9660%" y="213" width="1.4311%" height="15" fill="rgb(222,148,37)" fg:x="229" fg:w="8"/><text x="41.2160%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (10 samples, 1.79%)</title><rect x="40.7871%" y="245" width="1.7889%" height="15" fill="rgb(234,67,33)" fg:x="228" fg:w="10"/><text x="41.0371%" y="255.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.18%)</title><rect x="42.3971%" y="229" width="0.1789%" height="15" fill="rgb(247,98,35)" fg:x="237" fg:w="1"/><text x="42.6471%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1 samples, 0.18%)</title><rect x="42.5760%" y="229" width="0.1789%" height="15" fill="rgb(247,138,52)" fg:x="238" fg:w="1"/><text x="42.8260%" y="239.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.72%)</title><rect x="42.5760%" y="245" width="0.7156%" height="15" fill="rgb(213,79,30)" fg:x="238" fg:w="4"/><text x="42.8260%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.54%)</title><rect x="42.7549%" y="229" width="0.5367%" height="15" fill="rgb(246,177,23)" fg:x="239" fg:w="3"/><text x="43.0049%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5 samples, 0.89%)</title><rect x="43.2916%" y="213" width="0.8945%" height="15" fill="rgb(230,62,27)" fg:x="242" fg:w="5"/><text x="43.5416%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (5 samples, 0.89%)</title><rect x="43.2916%" y="197" width="0.8945%" height="15" fill="rgb(216,154,8)" fg:x="242" fg:w="5"/><text x="43.5416%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (5 samples, 0.89%)</title><rect x="43.2916%" y="181" width="0.8945%" height="15" fill="rgb(244,35,45)" fg:x="242" fg:w="5"/><text x="43.5416%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (5 samples, 0.89%)</title><rect x="43.2916%" y="165" width="0.8945%" height="15" fill="rgb(251,115,12)" fg:x="242" fg:w="5"/><text x="43.5416%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (5 samples, 0.89%)</title><rect x="43.2916%" y="149" width="0.8945%" height="15" fill="rgb(240,54,50)" fg:x="242" fg:w="5"/><text x="43.5416%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (5 samples, 0.89%)</title><rect x="43.2916%" y="133" width="0.8945%" height="15" fill="rgb(233,84,52)" fg:x="242" fg:w="5"/><text x="43.5416%" y="143.50"></text></g><g><title>ahash::operations::folded_multiply (5 samples, 0.89%)</title><rect x="46.8694%" y="165" width="0.8945%" height="15" fill="rgb(207,117,47)" fg:x="262" fg:w="5"/><text x="47.1194%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (5 samples, 0.89%)</title><rect x="46.8694%" y="149" width="0.8945%" height="15" fill="rgb(249,43,39)" fg:x="262" fg:w="5"/><text x="47.1194%" y="159.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (24 samples, 4.29%)</title><rect x="44.1860%" y="181" width="4.2934%" height="15" fill="rgb(209,38,44)" fg:x="247" fg:w="24"/><text x="44.4360%" y="191.50">ahash..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.72%)</title><rect x="47.7639%" y="165" width="0.7156%" height="15" fill="rgb(236,212,23)" fg:x="267" fg:w="4"/><text x="48.0139%" y="175.50"></text></g><g><title>ahash::operations::read_small (2 samples, 0.36%)</title><rect x="48.4794%" y="181" width="0.3578%" height="15" fill="rgb(242,79,21)" fg:x="271" fg:w="2"/><text x="48.7294%" y="191.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_u32 (2 samples, 0.36%)</title><rect x="48.4794%" y="165" width="0.3578%" height="15" fill="rgb(211,96,35)" fg:x="271" fg:w="2"/><text x="48.7294%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.89%)</title><rect x="48.8372%" y="181" width="0.8945%" height="15" fill="rgb(253,215,40)" fg:x="273" fg:w="5"/><text x="49.0872%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (58 samples, 10.38%)</title><rect x="40.6082%" y="277" width="10.3757%" height="15" fill="rgb(211,81,21)" fg:x="227" fg:w="58"/><text x="40.8582%" y="287.50">hashbrown::map:..</text></g><g><title>core::hash::BuildHasher::hash_one (57 samples, 10.20%)</title><rect x="40.7871%" y="261" width="10.1968%" height="15" fill="rgb(208,190,38)" fg:x="228" fg:w="57"/><text x="41.0371%" y="271.50">core::hash::Bui..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (43 samples, 7.69%)</title><rect x="43.2916%" y="245" width="7.6923%" height="15" fill="rgb(235,213,38)" fg:x="242" fg:w="43"/><text x="43.5416%" y="255.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (43 samples, 7.69%)</title><rect x="43.2916%" y="229" width="7.6923%" height="15" fill="rgb(237,122,38)" fg:x="242" fg:w="43"/><text x="43.5416%" y="239.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (38 samples, 6.80%)</title><rect x="44.1860%" y="213" width="6.7979%" height="15" fill="rgb(244,218,35)" fg:x="247" fg:w="38"/><text x="44.4360%" y="223.50">core::has..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (38 samples, 6.80%)</title><rect x="44.1860%" y="197" width="6.7979%" height="15" fill="rgb(240,68,47)" fg:x="247" fg:w="38"/><text x="44.4360%" y="207.50">&lt;ahash::f..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7 samples, 1.25%)</title><rect x="49.7317%" y="181" width="1.2522%" height="15" fill="rgb(210,16,53)" fg:x="278" fg:w="7"/><text x="49.9817%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.54%)</title><rect x="51.1628%" y="229" width="0.5367%" height="15" fill="rgb(235,124,12)" fg:x="286" fg:w="3"/><text x="51.4128%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.54%)</title><rect x="51.1628%" y="213" width="0.5367%" height="15" fill="rgb(224,169,11)" fg:x="286" fg:w="3"/><text x="51.4128%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl core::borrow::Borrow&lt;[T]&gt; for alloc::vec::Vec&lt;T,A&gt;&gt;::borrow (6 samples, 1.07%)</title><rect x="51.6995%" y="181" width="1.0733%" height="15" fill="rgb(250,166,2)" fg:x="289" fg:w="6"/><text x="51.9495%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (66 samples, 11.81%)</title><rect x="52.7728%" y="149" width="11.8068%" height="15" fill="rgb(242,216,29)" fg:x="295" fg:w="66"/><text x="53.0228%" y="159.50">&lt;[A] as core::slic..</text></g><g><title>__memcmp_avx2_movbe_rtm (57 samples, 10.20%)</title><rect x="54.3828%" y="133" width="10.1968%" height="15" fill="rgb(230,116,27)" fg:x="304" fg:w="57"/><text x="54.6328%" y="143.50">__memcmp_avx2_m..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (77 samples, 13.77%)</title><rect x="51.6995%" y="213" width="13.7746%" height="15" fill="rgb(228,99,48)" fg:x="289" fg:w="77"/><text x="51.9495%" y="223.50">hashbrown::map::equiv..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (77 samples, 13.77%)</title><rect x="51.6995%" y="197" width="13.7746%" height="15" fill="rgb(253,11,6)" fg:x="289" fg:w="77"/><text x="51.9495%" y="207.50">&lt;Q as hashbrown::Equi..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71 samples, 12.70%)</title><rect x="52.7728%" y="181" width="12.7013%" height="15" fill="rgb(247,143,39)" fg:x="295" fg:w="71"/><text x="53.0228%" y="191.50">core::cmp::impls::&lt;..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (71 samples, 12.70%)</title><rect x="52.7728%" y="165" width="12.7013%" height="15" fill="rgb(236,97,10)" fg:x="295" fg:w="71"/><text x="53.0228%" y="175.50">core::slice::cmp::&lt;..</text></g><g><title>one_billion_row_challenge::main (5 samples, 0.89%)</title><rect x="64.5796%" y="149" width="0.8945%" height="15" fill="rgb(233,208,19)" fg:x="361" fg:w="5"/><text x="64.8296%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.72%)</title><rect x="65.4741%" y="213" width="0.7156%" height="15" fill="rgb(216,164,2)" fg:x="366" fg:w="4"/><text x="65.7241%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.72%)</title><rect x="65.4741%" y="197" width="0.7156%" height="15" fill="rgb(220,129,5)" fg:x="366" fg:w="4"/><text x="65.7241%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.72%)</title><rect x="65.4741%" y="181" width="0.7156%" height="15" fill="rgb(242,17,10)" fg:x="366" fg:w="4"/><text x="65.7241%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.72%)</title><rect x="65.4741%" y="165" width="0.7156%" height="15" fill="rgb(242,107,0)" fg:x="366" fg:w="4"/><text x="65.7241%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (85 samples, 15.21%)</title><rect x="51.6995%" y="229" width="15.2057%" height="15" fill="rgb(251,28,31)" fg:x="289" fg:w="85"/><text x="51.9495%" y="239.50">hashbrown::raw::RawTabl..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.72%)</title><rect x="66.1896%" y="213" width="0.7156%" height="15" fill="rgb(233,223,10)" fg:x="370" fg:w="4"/><text x="66.4396%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.72%)</title><rect x="66.1896%" y="197" width="0.7156%" height="15" fill="rgb(215,21,27)" fg:x="370" fg:w="4"/><text x="66.4396%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.72%)</title><rect x="66.1896%" y="181" width="0.7156%" height="15" fill="rgb(232,23,21)" fg:x="370" fg:w="4"/><text x="66.4396%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (20 samples, 3.58%)</title><rect x="66.9052%" y="229" width="3.5778%" height="15" fill="rgb(244,5,23)" fg:x="374" fg:w="20"/><text x="67.1552%" y="239.50">hash..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 1.25%)</title><rect x="70.4830%" y="197" width="1.2522%" height="15" fill="rgb(226,81,46)" fg:x="394" fg:w="7"/><text x="70.7330%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 1.43%)</title><rect x="70.4830%" y="229" width="1.4311%" height="15" fill="rgb(247,70,30)" fg:x="394" fg:w="8"/><text x="70.7330%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 1.43%)</title><rect x="70.4830%" y="213" width="1.4311%" height="15" fill="rgb(212,68,19)" fg:x="394" fg:w="8"/><text x="70.7330%" y="223.50"></text></g><g><title>one_billion_row_challenge::main (1 samples, 0.18%)</title><rect x="71.7352%" y="197" width="0.1789%" height="15" fill="rgb(240,187,13)" fg:x="401" fg:w="1"/><text x="71.9852%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (180 samples, 32.20%)</title><rect x="40.4293%" y="325" width="32.2004%" height="15" fill="rgb(223,113,26)" fg:x="226" fg:w="180"/><text x="40.6793%" y="335.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (180 samples, 32.20%)</title><rect x="40.4293%" y="309" width="32.2004%" height="15" fill="rgb(206,192,2)" fg:x="226" fg:w="180"/><text x="40.6793%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (180 samples, 32.20%)</title><rect x="40.4293%" y="293" width="32.2004%" height="15" fill="rgb(241,108,4)" fg:x="226" fg:w="180"/><text x="40.6793%" y="303.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (121 samples, 21.65%)</title><rect x="50.9839%" y="277" width="21.6458%" height="15" fill="rgb(247,173,49)" fg:x="285" fg:w="121"/><text x="51.2339%" y="287.50">hashbrown::raw::RawTable&lt;T,A&gt;::get..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (121 samples, 21.65%)</title><rect x="50.9839%" y="261" width="21.6458%" height="15" fill="rgb(224,114,35)" fg:x="285" fg:w="121"/><text x="51.2339%" y="271.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (121 samples, 21.65%)</title><rect x="50.9839%" y="245" width="21.6458%" height="15" fill="rgb(245,159,27)" fg:x="285" fg:w="121"/><text x="51.2339%" y="255.50">hashbrown::raw::RawTableInner::fin..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.72%)</title><rect x="71.9141%" y="229" width="0.7156%" height="15" fill="rgb(245,172,44)" fg:x="402" fg:w="4"/><text x="72.1641%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.72%)</title><rect x="71.9141%" y="213" width="0.7156%" height="15" fill="rgb(236,23,11)" fg:x="402" fg:w="4"/><text x="72.1641%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (12 samples, 2.15%)</title><rect x="80.6798%" y="293" width="2.1467%" height="15" fill="rgb(205,117,38)" fg:x="451" fg:w="12"/><text x="80.9298%" y="303.50">&lt;..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (12 samples, 2.15%)</title><rect x="80.6798%" y="277" width="2.1467%" height="15" fill="rgb(237,72,25)" fg:x="451" fg:w="12"/><text x="80.9298%" y="287.50">s..</text></g><g><title>core::cmp::min (5 samples, 0.89%)</title><rect x="81.9320%" y="261" width="0.8945%" height="15" fill="rgb(244,70,9)" fg:x="458" fg:w="5"/><text x="82.1820%" y="271.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.89%)</title><rect x="81.9320%" y="245" width="0.8945%" height="15" fill="rgb(217,125,39)" fg:x="458" fg:w="5"/><text x="82.1820%" y="255.50"></text></g><g><title>std::io::read_until (5 samples, 0.89%)</title><rect x="81.9320%" y="229" width="0.8945%" height="15" fill="rgb(235,36,10)" fg:x="458" fg:w="5"/><text x="82.1820%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (31 samples, 5.55%)</title><rect x="82.8265%" y="293" width="5.5456%" height="15" fill="rgb(251,123,47)" fg:x="463" fg:w="31"/><text x="83.0765%" y="303.50">&lt;std::i..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (31 samples, 5.55%)</title><rect x="82.8265%" y="277" width="5.5456%" height="15" fill="rgb(221,13,13)" fg:x="463" fg:w="31"/><text x="83.0765%" y="287.50">std::io..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (24 samples, 4.29%)</title><rect x="84.0787%" y="261" width="4.2934%" height="15" fill="rgb(238,131,9)" fg:x="470" fg:w="24"/><text x="84.3287%" y="271.50">std::..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (24 samples, 4.29%)</title><rect x="84.0787%" y="245" width="4.2934%" height="15" fill="rgb(211,50,8)" fg:x="470" fg:w="24"/><text x="84.3287%" y="255.50">&lt;std:..</text></g><g><title>__GI___libc_read (23 samples, 4.11%)</title><rect x="84.2576%" y="229" width="4.1145%" height="15" fill="rgb(245,182,24)" fg:x="471" fg:w="23"/><text x="84.5076%" y="239.50">__GI..</text></g><g><title>[unknown] (23 samples, 4.11%)</title><rect x="84.2576%" y="213" width="4.1145%" height="15" fill="rgb(242,14,37)" fg:x="471" fg:w="23"/><text x="84.5076%" y="223.50">[unk..</text></g><g><title>[unknown] (19 samples, 3.40%)</title><rect x="84.9732%" y="197" width="3.3989%" height="15" fill="rgb(246,228,12)" fg:x="475" fg:w="19"/><text x="85.2232%" y="207.50">[un..</text></g><g><title>[unknown] (19 samples, 3.40%)</title><rect x="84.9732%" y="181" width="3.3989%" height="15" fill="rgb(213,55,15)" fg:x="475" fg:w="19"/><text x="85.2232%" y="191.50">[un..</text></g><g><title>[unknown] (15 samples, 2.68%)</title><rect x="85.6887%" y="165" width="2.6834%" height="15" fill="rgb(209,9,3)" fg:x="479" fg:w="15"/><text x="85.9387%" y="175.50">[u..</text></g><g><title>[unknown] (15 samples, 2.68%)</title><rect x="85.6887%" y="149" width="2.6834%" height="15" fill="rgb(230,59,30)" fg:x="479" fg:w="15"/><text x="85.9387%" y="159.50">[u..</text></g><g><title>[unknown] (13 samples, 2.33%)</title><rect x="86.0465%" y="133" width="2.3256%" height="15" fill="rgb(209,121,21)" fg:x="481" fg:w="13"/><text x="86.2965%" y="143.50">[..</text></g><g><title>[unknown] (13 samples, 2.33%)</title><rect x="86.0465%" y="117" width="2.3256%" height="15" fill="rgb(220,109,13)" fg:x="481" fg:w="13"/><text x="86.2965%" y="127.50">[..</text></g><g><title>[unknown] (12 samples, 2.15%)</title><rect x="86.2254%" y="101" width="2.1467%" height="15" fill="rgb(232,18,1)" fg:x="482" fg:w="12"/><text x="86.4754%" y="111.50">[..</text></g><g><title>[unknown] (10 samples, 1.79%)</title><rect x="86.5832%" y="85" width="1.7889%" height="15" fill="rgb(215,41,42)" fg:x="484" fg:w="10"/><text x="86.8332%" y="95.50">[..</text></g><g><title>[unknown] (9 samples, 1.61%)</title><rect x="86.7621%" y="69" width="1.6100%" height="15" fill="rgb(224,123,36)" fg:x="485" fg:w="9"/><text x="87.0121%" y="79.50"></text></g><g><title>[unknown] (7 samples, 1.25%)</title><rect x="87.1199%" y="53" width="1.2522%" height="15" fill="rgb(240,125,3)" fg:x="487" fg:w="7"/><text x="87.3699%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="88.1932%" y="37" width="0.1789%" height="15" fill="rgb(205,98,50)" fg:x="493" fg:w="1"/><text x="88.4432%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.36%)</title><rect x="88.3721%" y="245" width="0.3578%" height="15" fill="rgb(205,185,37)" fg:x="494" fg:w="2"/><text x="88.6221%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (13 samples, 2.33%)</title><rect x="88.3721%" y="261" width="2.3256%" height="15" fill="rgb(238,207,15)" fg:x="494" fg:w="13"/><text x="88.6221%" y="271.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 1.97%)</title><rect x="88.7299%" y="245" width="1.9678%" height="15" fill="rgb(213,199,42)" fg:x="496" fg:w="11"/><text x="88.9799%" y="255.50">c..</text></g><g><title>__memmove_avx_unaligned_erms_rtm (11 samples, 1.97%)</title><rect x="88.7299%" y="229" width="1.9678%" height="15" fill="rgb(235,201,11)" fg:x="496" fg:w="11"/><text x="88.9799%" y="239.50">_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 2.68%)</title><rect x="88.3721%" y="293" width="2.6834%" height="15" fill="rgb(207,46,11)" fg:x="494" fg:w="15"/><text x="88.6221%" y="303.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 2.68%)</title><rect x="88.3721%" y="277" width="2.6834%" height="15" fill="rgb(241,35,35)" fg:x="494" fg:w="15"/><text x="88.6221%" y="287.50">&lt;a..</text></g><g><title>std::io::read_until (2 samples, 0.36%)</title><rect x="90.6977%" y="261" width="0.3578%" height="15" fill="rgb(243,32,47)" fg:x="507" fg:w="2"/><text x="90.9477%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.54%)</title><rect x="91.0555%" y="293" width="0.5367%" height="15" fill="rgb(247,202,23)" fg:x="509" fg:w="3"/><text x="91.3055%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.54%)</title><rect x="91.0555%" y="277" width="0.5367%" height="15" fill="rgb(219,102,11)" fg:x="509" fg:w="3"/><text x="91.3055%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.54%)</title><rect x="91.0555%" y="261" width="0.5367%" height="15" fill="rgb(243,110,44)" fg:x="509" fg:w="3"/><text x="91.3055%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.54%)</title><rect x="91.0555%" y="245" width="0.5367%" height="15" fill="rgb(222,74,54)" fg:x="509" fg:w="3"/><text x="91.3055%" y="255.50"></text></g><g><title>__libc_start_main_impl (499 samples, 89.27%)</title><rect x="6.6190%" y="453" width="89.2665%" height="15" fill="rgb(216,99,12)" fg:x="37" fg:w="499"/><text x="6.8690%" y="463.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (499 samples, 89.27%)</title><rect x="6.6190%" y="437" width="89.2665%" height="15" fill="rgb(226,22,26)" fg:x="37" fg:w="499"/><text x="6.8690%" y="447.50">__libc_start_call_main</text></g><g><title>std::rt::lang_start (499 samples, 89.27%)</title><rect x="6.6190%" y="421" width="89.2665%" height="15" fill="rgb(217,163,10)" fg:x="37" fg:w="499"/><text x="6.8690%" y="431.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (499 samples, 89.27%)</title><rect x="6.6190%" y="405" width="89.2665%" height="15" fill="rgb(213,25,53)" fg:x="37" fg:w="499"/><text x="6.8690%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (499 samples, 89.27%)</title><rect x="6.6190%" y="389" width="89.2665%" height="15" fill="rgb(252,105,26)" fg:x="37" fg:w="499"/><text x="6.8690%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (499 samples, 89.27%)</title><rect x="6.6190%" y="373" width="89.2665%" height="15" fill="rgb(220,39,43)" fg:x="37" fg:w="499"/><text x="6.8690%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (499 samples, 89.27%)</title><rect x="6.6190%" y="357" width="89.2665%" height="15" fill="rgb(229,68,48)" fg:x="37" fg:w="499"/><text x="6.8690%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>one_billion_row_challenge::main (499 samples, 89.27%)</title><rect x="6.6190%" y="341" width="89.2665%" height="15" fill="rgb(252,8,32)" fg:x="37" fg:w="499"/><text x="6.8690%" y="351.50">one_billion_row_challenge::main</text></g><g><title>std::io::BufRead::read_until (130 samples, 23.26%)</title><rect x="72.6297%" y="325" width="23.2558%" height="15" fill="rgb(223,20,43)" fg:x="406" fg:w="130"/><text x="72.8797%" y="335.50">std::io::BufRead::read_until</text></g><g><title>std::io::read_until (122 samples, 21.82%)</title><rect x="74.0608%" y="309" width="21.8247%" height="15" fill="rgb(229,81,49)" fg:x="414" fg:w="122"/><text x="74.3108%" y="319.50">std::io::read_until</text></g><g><title>std::sys_common::memchr::memchr (24 samples, 4.29%)</title><rect x="91.5921%" y="293" width="4.2934%" height="15" fill="rgb(236,28,36)" fg:x="512" fg:w="24"/><text x="91.8421%" y="303.50">std::..</text></g><g><title>std::sys::unix::memchr::memchr (17 samples, 3.04%)</title><rect x="92.8444%" y="277" width="3.0411%" height="15" fill="rgb(249,185,26)" fg:x="519" fg:w="17"/><text x="93.0944%" y="287.50">std..</text></g><g><title>__memchr_avx2_rtm (17 samples, 3.04%)</title><rect x="92.8444%" y="261" width="3.0411%" height="15" fill="rgb(249,174,33)" fg:x="519" fg:w="17"/><text x="93.0944%" y="271.50">__m..</text></g><g><title>_start (500 samples, 89.45%)</title><rect x="6.6190%" y="469" width="89.4454%" height="15" fill="rgb(233,201,37)" fg:x="37" fg:w="500"/><text x="6.8690%" y="479.50">_start</text></g><g><title>_dl_start (1 samples, 0.18%)</title><rect x="95.8855%" y="453" width="0.1789%" height="15" fill="rgb(221,78,26)" fg:x="536" fg:w="1"/><text x="96.1355%" y="463.50"></text></g><g><title>_dl_start_final (1 samples, 0.18%)</title><rect x="95.8855%" y="437" width="0.1789%" height="15" fill="rgb(250,127,30)" fg:x="536" fg:w="1"/><text x="96.1355%" y="447.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.18%)</title><rect x="95.8855%" y="421" width="0.1789%" height="15" fill="rgb(230,49,44)" fg:x="536" fg:w="1"/><text x="96.1355%" y="431.50"></text></g><g><title>dl_main (1 samples, 0.18%)</title><rect x="95.8855%" y="405" width="0.1789%" height="15" fill="rgb(229,67,23)" fg:x="536" fg:w="1"/><text x="96.1355%" y="415.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.18%)</title><rect x="95.8855%" y="389" width="0.1789%" height="15" fill="rgb(249,83,47)" fg:x="536" fg:w="1"/><text x="96.1355%" y="399.50"></text></g><g><title>_dl_protect_relro (1 samples, 0.18%)</title><rect x="95.8855%" y="373" width="0.1789%" height="15" fill="rgb(215,43,3)" fg:x="536" fg:w="1"/><text x="96.1355%" y="383.50"></text></g><g><title>__mprotect (1 samples, 0.18%)</title><rect x="95.8855%" y="357" width="0.1789%" height="15" fill="rgb(238,154,13)" fg:x="536" fg:w="1"/><text x="96.1355%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="341" width="0.1789%" height="15" fill="rgb(219,56,2)" fg:x="536" fg:w="1"/><text x="96.1355%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="325" width="0.1789%" height="15" fill="rgb(233,0,4)" fg:x="536" fg:w="1"/><text x="96.1355%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="309" width="0.1789%" height="15" fill="rgb(235,30,7)" fg:x="536" fg:w="1"/><text x="96.1355%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="293" width="0.1789%" height="15" fill="rgb(250,79,13)" fg:x="536" fg:w="1"/><text x="96.1355%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="277" width="0.1789%" height="15" fill="rgb(211,146,34)" fg:x="536" fg:w="1"/><text x="96.1355%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="261" width="0.1789%" height="15" fill="rgb(228,22,38)" fg:x="536" fg:w="1"/><text x="96.1355%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="245" width="0.1789%" height="15" fill="rgb(235,168,5)" fg:x="536" fg:w="1"/><text x="96.1355%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="229" width="0.1789%" height="15" fill="rgb(221,155,16)" fg:x="536" fg:w="1"/><text x="96.1355%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="213" width="0.1789%" height="15" fill="rgb(215,215,53)" fg:x="536" fg:w="1"/><text x="96.1355%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="197" width="0.1789%" height="15" fill="rgb(223,4,10)" fg:x="536" fg:w="1"/><text x="96.1355%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="181" width="0.1789%" height="15" fill="rgb(234,103,6)" fg:x="536" fg:w="1"/><text x="96.1355%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="165" width="0.1789%" height="15" fill="rgb(227,97,0)" fg:x="536" fg:w="1"/><text x="96.1355%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="149" width="0.1789%" height="15" fill="rgb(234,150,53)" fg:x="536" fg:w="1"/><text x="96.1355%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.18%)</title><rect x="95.8855%" y="133" width="0.1789%" height="15" fill="rgb(228,201,54)" fg:x="536" fg:w="1"/><text x="96.1355%" y="143.50"></text></g><g><title>one-billion-row (554 samples, 99.11%)</title><rect x="0.0000%" y="485" width="99.1055%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="554"/><text x="0.2500%" y="495.50">one-billion-row</text></g><g><title>std::io::read_until (17 samples, 3.04%)</title><rect x="96.0644%" y="469" width="3.0411%" height="15" fill="rgb(237,53,32)" fg:x="537" fg:w="17"/><text x="96.3144%" y="479.50">std..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.18%)</title><rect x="98.9267%" y="453" width="0.1789%" height="15" fill="rgb(233,25,53)" fg:x="553" fg:w="1"/><text x="99.1767%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.18%)</title><rect x="98.9267%" y="437" width="0.1789%" height="15" fill="rgb(210,40,34)" fg:x="553" fg:w="1"/><text x="99.1767%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.18%)</title><rect x="98.9267%" y="421" width="0.1789%" height="15" fill="rgb(241,220,44)" fg:x="553" fg:w="1"/><text x="99.1767%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.18%)</title><rect x="98.9267%" y="405" width="0.1789%" height="15" fill="rgb(235,28,35)" fg:x="553" fg:w="1"/><text x="99.1767%" y="415.50"></text></g><g><title>all (559 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="559"/><text x="0.2500%" y="511.50"></text></g><g><title>perf-exec (5 samples, 0.89%)</title><rect x="99.1055%" y="485" width="0.8945%" height="15" fill="rgb(224,130,29)" fg:x="554" fg:w="5"/><text x="99.3555%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="469" width="0.8945%" height="15" fill="rgb(235,212,8)" fg:x="554" fg:w="5"/><text x="99.3555%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="453" width="0.8945%" height="15" fill="rgb(223,33,50)" fg:x="554" fg:w="5"/><text x="99.3555%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="437" width="0.8945%" height="15" fill="rgb(219,149,13)" fg:x="554" fg:w="5"/><text x="99.3555%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="421" width="0.8945%" height="15" fill="rgb(250,156,29)" fg:x="554" fg:w="5"/><text x="99.3555%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="405" width="0.8945%" height="15" fill="rgb(216,193,19)" fg:x="554" fg:w="5"/><text x="99.3555%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="389" width="0.8945%" height="15" fill="rgb(216,135,14)" fg:x="554" fg:w="5"/><text x="99.3555%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="373" width="0.8945%" height="15" fill="rgb(241,47,5)" fg:x="554" fg:w="5"/><text x="99.3555%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="357" width="0.8945%" height="15" fill="rgb(233,42,35)" fg:x="554" fg:w="5"/><text x="99.3555%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="341" width="0.8945%" height="15" fill="rgb(231,13,6)" fg:x="554" fg:w="5"/><text x="99.3555%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="325" width="0.8945%" height="15" fill="rgb(207,181,40)" fg:x="554" fg:w="5"/><text x="99.3555%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="309" width="0.8945%" height="15" fill="rgb(254,173,49)" fg:x="554" fg:w="5"/><text x="99.3555%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.89%)</title><rect x="99.1055%" y="293" width="0.8945%" height="15" fill="rgb(221,1,38)" fg:x="554" fg:w="5"/><text x="99.3555%" y="303.50"></text></g></svg></svg>